"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var gql = require("apollo-server").gql;
var typeDefs = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\n    type Query {\n        heros: [Hero]\n        heroByID(id: String!): Hero\n        heroByName(name: String!): Hero\n        herosByPower(power: String!): [Hero]\n        familyByID(id: String!): Family\n        groups: [Group]\n    }\n\n    type Mutation {\n        incrementMovieCount(id: String!):incrementMovieCountResponse!\n        insertNewHero(hero: HeroInput!):insertNewHeroResponse!\n        removeHero(id: String!):removeHeroResponse\n        setFamily(id: String!, family: FamilyInput):setFamilyResponse!\n    }\n\n    type removeHeroResponse {\n        code: Int!\n    }\n\n    type incrementMovieCountResponse {\n        code: Int!\n        success: Boolean!\n        message: String!\n        movieCount: Int\n    }\n\n    type insertNewHeroResponse {\n        code: Int!\n        success: Boolean!\n        message: String!\n        hero: Hero\n    }\n\n    type setFamilyResponse {\n        code: Int!\n    }\n\n    type Family {\n        dad: Boolean!\n        mom: Boolean!\n    }\n\n    type Hero {\n        name: String!\n        power: String!\n        group: String!\n        family: Family\n        movieCount: Int!\n    }    \n\n    type Group {\n        name: String!\n        heros: [Hero]\n    }\n\n    input HeroInput {\n        name: String!\n        power: String!\n        group: String!\n        family: FamilyInput\n        movieCount: Int!\n    }\n\n    input FamilyInput {\n        dad: Boolean!\n        mom: Boolean!\n    }\n    "], ["\n\n    type Query {\n        heros: [Hero]\n        heroByID(id: String!): Hero\n        heroByName(name: String!): Hero\n        herosByPower(power: String!): [Hero]\n        familyByID(id: String!): Family\n        groups: [Group]\n    }\n\n    type Mutation {\n        incrementMovieCount(id: String!):incrementMovieCountResponse!\n        insertNewHero(hero: HeroInput!):insertNewHeroResponse!\n        removeHero(id: String!):removeHeroResponse\n        setFamily(id: String!, family: FamilyInput):setFamilyResponse!\n    }\n\n    type removeHeroResponse {\n        code: Int!\n    }\n\n    type incrementMovieCountResponse {\n        code: Int!\n        success: Boolean!\n        message: String!\n        movieCount: Int\n    }\n\n    type insertNewHeroResponse {\n        code: Int!\n        success: Boolean!\n        message: String!\n        hero: Hero\n    }\n\n    type setFamilyResponse {\n        code: Int!\n    }\n\n    type Family {\n        dad: Boolean!\n        mom: Boolean!\n    }\n\n    type Hero {\n        name: String!\n        power: String!\n        group: String!\n        family: Family\n        movieCount: Int!\n    }    \n\n    type Group {\n        name: String!\n        heros: [Hero]\n    }\n\n    input HeroInput {\n        name: String!\n        power: String!\n        group: String!\n        family: FamilyInput\n        movieCount: Int!\n    }\n\n    input FamilyInput {\n        dad: Boolean!\n        mom: Boolean!\n    }\n    "])));
exports.default = typeDefs;
var templateObject_1;
